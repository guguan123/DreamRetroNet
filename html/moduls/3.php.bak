

<?php
/**
 * Github授权登录
 * @param $client_id      GitHub oauth应用的Client ID
 * @param $client_secret  GitHub oauth应用的Client Secret
 * @param $app_name       GitHub用户名或应用程序名，作为User-Agent标头值
 * @author codehui <admin@codehui.net> 2019-07-22
 */
class GitOauth {
    const GET_AUTH_CODE_URL    = "https://github.com/login/oauth/authorize";
    const GET_ACCESS_TOKEN_URL = "https://github.com/login/oauth/access_token";
    const GET_USER_URL         = "https://api.github.com/user";
    private $client_id;
    private $client_secret;
    private $app_name;
    public function __construct($client_id, $client_secret, $app_name = 1) {
        if($client_id && $client_secret){
       $this->client_id     = $client_id;
            $this->client_secret = $client_secret;
            $this->app_name      = $app_name;
        } else {
            $this->error('101', '缺少必要参数');
        }
    }
    /**
     * 授权页面
     */
    public function gitLogin() {
        // 生成唯一随机串防CSRF攻击
        $state = md5(uniqid(rand(), TRUE));
    //    session('state', $state);
        $uri = $this->combineURL(self::GET_AUTH_CODE_URL, [
            "client_id" =>c9cbb49f280cecfd3a7e,
            "state"     => $state,
            "scope"     => 'read:user%20user:email'
        ]);
        header("Location:$uri");
    }
    /**
     * 获取信息
     * @return array
     */
    public function getInfo(){
        $token = $this->getToken();
        if (isset($token['errcode'])){
            return $token;
        }
        $info = $this->getUser($token['access_token']);
        return $info;
    }
    /**
     * 获取access_token
     * @return array
     */
    public function getToken() {
        // 验证state防止CSRF攻击
        if (!$_REQUEST['state'] || $_REQUEST['state'] != session('state')){
            return $this->error(0, 'state验证失败');
        }
        $response = $this->httpsRequest(self::GET_ACCESS_TOKEN_URL, [
            'client_id'     =>$this->client_id,
            'client_secret' => $this->client_secret,
            'code'          => $_REQUEST['code']
        ], 'POST');
        $params = [];
        parse_str($response, $params);
        if(isset($params['error'])){
            return $this->error($params['error'], $params['error_description']);
        }
        return $params;
    }
    /**
     * 获取用户信息
     * @param $access_token   上一步获取到的access_token
     * @return array
     */
    public function getUser($access_token) {
        $response = $this->httpsRequest(self::GET_USER_URL, [], 'GET', [
            "User-Agent: {$this->app_name}",
            "Authorization: token {$access_token}"
        ]);
        $response = json_decode($response);
        if(!isset($response->login)) {
            return $this->error(105, $response);
        }
        return $response;
    }
    /**
     * 错误信息
     * @param int $code    错误代码
     * @param string $info 描述信息
     * @return array
     */
    public function error($code = 0, $msg = ''){
        return [
            'errcode' => $code,
            'errmsg' => $msg
        ];
    }
    /**
     * 拼接url
     * @param string $baseURL   请求的url
     * @param array  $keysArr   参数列表数组
     * @return string           返回拼接的url
     */
    public function combineURL($baseURL, $keysArr) {
        $combined = $baseURL . "?";
        $valueArr = [];
        foreach($keysArr as $key => $val){
            $valueArr[] = "$key=$val";
        }
        $keyStr = implode("&", $valueArr);
        $combined .= ($keyStr);
        return $combined;
    }
    /**
     * 获取服务器数据
     * @param string $url  请求的url
     * @return  unknown    请求返回的内容
     */
    public function httpsRequest($url, $keysArr = [], $type = 'GET', $header = []) {
        $curl = curl_init();
        curl_setopt($curl, CURLOPT_URL, $url);
        curl_setopt($curl, CURLOPT_CUSTOMREQUEST, $type);
        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, FALSE);
        curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, FALSE);
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
        if ($header) {
            curl_setopt($curl, CURLOPT_HTTPHEADER, $header);
        }
        if ($type == 'POST') {
            curl_setopt($curl, CURLOPT_POST, 1);
            curl_setopt($curl, CURLOPT_POSTFIELDS, $keysArr);
        }
        $output = curl_exec($curl);
        curl_close($curl);
        return $output;
    }
}
// 跳转到授权页面
$git = new GitOauth('Client ID', 'Client Secret', 'app_name');
$git->gitLogin();
// 回调方法
$info = $git->getInfo();
echo json_encode($info);
?>